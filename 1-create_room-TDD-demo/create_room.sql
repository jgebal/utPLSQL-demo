--Cleanup before starting the script
drop package test_create_room;
drop function create_room;
drop table rooms;

clear screen

set serveroutput on format truncated size unlimited
set linesize 200
set pagesize 0
--set sqlnumber off
set sqlprompt ''
set echo on

--Check if utPLSQL is installed and what version it is.
select ut.version() from dual;
pause
clear screen
--Create an empty test suite
create or replace package test_create_room is

  --%suite(Function create_room)

end;
/

pause
--------------------------------------------------------------
-- Run an empty test suite - zero tests -> zero failures
exec ut.run('test_create_room');
pause
clear screen

--Create first test specification
create or replace package test_create_room is
  --%suite(Function create_room)

  --%test(Creates a room with given name and returns its id)
  procedure create_new_room;

end;
/

pause
--------------------------------------------------------------
-- Run test suite - fails - no test package body
exec ut.run('test_create_room');
pause
clear screen


-- Define first test body
-- The test specifies API of the function to be implemented:
-- 1. The function will be called CREATE_ROOM
-- 2. Function will accept input parameter a_room_name (varchar datatype)
-- 3. Function will return an integer value.

create or replace package body test_create_room is

  procedure create_new_room is
    l_room_id integer;
  begin
    l_room_id := create_room( a_room_name => 'Living room' );
  end;

end;
/


pause
--------------------------------------------------------------
-- Run test suite - fails - test package body is invalid
--  as the function does not exist
exec ut.run('test_create_room');
pause
clear screen



--------------------------------------------------------------
-- Create a SKELETON for the CREATE_ROOM function
--  The function is adhering to the specification in the test.
create or replace function create_room( a_room_name varchar2 ) return integer
is
begin
  return null;
end;
/


pause
--------------------------------------------------------------
-- Run test suite - test is successful, but we're not testing any functionality yet
-- The test simply validates that the function exists and can be called without exception
exec ut.run('test_create_room');
pause
clear screen


-- Now we can implement another part of this test.
--  Check that the id returned from function is the id of a record inserted into the table.
--  Note that the test again specifies the table structure:
--  1. The table name is ROOMS - specified in l_actual cursor
--  2. Table has two columns: ROOM_KEY, NAME - specified in l_expected cursor
--  3. The function call causes a row to be inserted into the rooms table with passed NAME
--  4. The value returned by function is the value inserted into the room_key column

create or replace package body test_create_room is

  procedure create_new_room is
    l_room_id  integer;
    l_actual   sys_refcursor;
    l_expected sys_refcursor;
  begin
    --ACT
    l_room_id := create_room( a_room_name => 'Living room' );

    --ASSERT
    open l_actual for
      select * from rooms where room_key = l_room_id;

    open l_expected for
      select l_room_id as room_key, 'Living room' as name from dual;

    ut.expect( l_actual ).to_equal( l_expected );
    
  end;

end;
/

pause
--------------------------------------------------------------
-- Run test suite - test is failing as the table does nto exist
exec ut.run('test_create_room');
pause
clear screen


--  Create the missing table
create table rooms (
  room_key integer generated by default as identity,
  name     varchar2(100),
  constraint rooms_pk primary key (room_key)
);


pause
--------------------------------------------------------------
-- Run test suite - test is failing as the CREATE_ROOM function isnt inserting any data
exec ut.run('test_create_room');
pause
clear screen



-- Implement the CREATE_ROOM function code
create or replace function create_room( a_room_name varchar2 ) return integer
is
  l_result integer;
begin
  insert into rooms(name) values(a_room_name)
  returning room_key into l_result;
  
  return l_result;
end;
/

pause
--------------------------------------------------------------
-- Validate that the stest is now passing
exec ut.run('test_create_room');
pause
clear screen


-- Add the Name not null test
create or replace package test_create_room is
  --%suite(Function create_room)

  --%test(Creates a room with given name and returns its id)
  procedure create_new_room;



  --%test(Throws exception when room name is null)
  --%throws(-02290)
  procedure fail_on_null_room_name;



end;
/

pause
-- Implement the second test
create or replace package body test_create_room is
  procedure create_new_room is
    l_room_id  integer;
    l_actual   sys_refcursor;
    l_expected sys_refcursor;
  begin
    --ACT
    l_room_id := create_room( a_room_name => 'Living room' );
    --ASSERT
    open l_actual for
      select * from rooms where room_key = l_room_id;
    open l_expected for
      select l_room_id as room_key, 'Living room' as name from dual;
    ut.expect( l_actual ).to_equal( l_expected );
  end;


  procedure fail_on_null_room_name is
    l_room_id integer;
  begin
    --ACT
    l_room_id := create_room( NULL );
    --ASSERT done via --%throws annotation in spec
  end;

end;
/

pause
--------------------------------------------------------------
exec ut.run('test_create_room');
pause
clear screen

-- Add not null constraint
alter table rooms
  add constraint rooms_name_nn check (name is not null);

pause
--------------------------------------------------------------
exec ut.run('test_create_room');
pause
clear screen

-- Add the unique name test
create or replace package test_create_room is
  --%suite(Function create_room)

  --%test(Creates a room with given name and returns its id)
  procedure create_new_room;

  --%test(Throws exception when room name is null)
  --%throws(-02290)
  procedure fail_on_null_room_name;

  --%test(Throws exception when room already exists)
  --%throws(-00001)
  procedure fail_on_duplcate_room_name;

end;
/
pause

-- Implement the third test
create or replace package body test_create_room is

  procedure create_new_room is
    l_room_id  integer;
    l_actual   sys_refcursor;
    l_expected sys_refcursor;
  begin
    --ACT
    l_room_id := create_room( a_room_name => 'Living room' );
    --ASSERT
    open l_actual for
      select * from rooms where room_key = l_room_id;
    open l_expected for
      select l_room_id as room_key, 'Living room' as name from dual;
    ut.expect( l_actual ).to_equal( l_expected );
  end;

  procedure fail_on_null_room_name is
    l_room_id integer;
  begin
    -- ACT
    l_room_id := create_room(NULL);
    --ASSERT done via --%throws annotation in spec
  end;

  procedure fail_on_duplcate_room_name is
    l_room_id integer;
  begin
    --ARRANGE
    l_room_id := create_room('Living room');
    --ACT
    l_room_id := create_room('Living room');
    --ASSERT done via --%throws annotation in spec
  end;  

end;
/

pause
--------------------------------------------------------------
exec ut.run('test_create_room');
pause
clear screen


-- add unique constraint to fulfill the test
alter table rooms 
  add constraint rooms_uk unique (name);


pause
--------------------------------------------------------------
exec ut.run('test_create_room');
pause
clear screen


exit
